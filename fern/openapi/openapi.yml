openapi: 3.0.3
info:
  title: Plant Store API
  version: 1.0.0
  description: An API for managing plant store operations.
paths:
  /owners:
    post:
      summary: Add a new owner as a customer of the store.
      operationId: addOwner
      tags:
        - Owner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlantOwnerInput'
      responses:
        '201':
          description: Owner added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlantOwner'
        '400':
          $ref: '#/components/responses/BadRequest'
  /owners/{ownerId}:
    delete:
      summary: Delete an owner by ID
      operationId: deleteOwner
      tags:
        - Owner
      parameters:
        - $ref: '#/components/parameters/OwnerId'
      responses:
        '204':
          description: Owner deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
  /plants:
    post:
      summary: Add a new plant to the store.
      operationId: addPlant
      tags:
        - Plant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlantInput'
      responses:
        '201':
          description: Plant added successfully
        '400':
          $ref: '#/components/responses/BadRequest'
  /plants/{plantId}:
    get:
      summary: Get a plant by ID
      operationId: getPlantById
      tags:
        - Plant
      parameters:
        - $ref: '#/components/parameters/PlantId'
      responses:
        '200':
          description: Plant retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a plant by ID
      operationId: deletePlantById
      tags:
        - Plant
      parameters:
        - $ref: '#/components/parameters/PlantId'
      responses:
        '204':
          description: Plant deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
components:
  schemas:
    OwnerId:
      type: string
      format: uuid
      description: Unique identifier for an owner.
    PlantOwner:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/PlantOwnerId'
        age:
          $ref: '#/components/schemas/OwnerAge'
        plants:
          type: array
          items:
            $ref: '#/components/schemas/Plant'
    OwnerAge:
      type: string
      enum:
        - child
        - adult
        - senior
      description: Age category of an owner.
    PlantOwnerId:
      allOf:
        - $ref: '#/components/schemas/OwnerId'
      description: Identifier for a plant owner.
    PlantOwnerInput:
      type: object
      properties:
        name:
          type: string
        age:
          $ref: '#/components/schemas/OwnerAge'
        plants:
          type: array
          items:
            $ref: '#/components/schemas/PlantInput'
      required:
        - name
        - age
        - plants
      description: Input for adding a new owner.
    PlantInput:
      type: object
      properties:
        name:
          type: string
        category:
          $ref: '#/components/schemas/PlantCategory'
        photoUrls:
          type: object
          additionalProperties:
            type: string
        status:
          $ref: '#/components/schemas/PlantStatus'
      required:
        - name
        - photoUrls
      description: Input for adding a new plant.
    PlantId:
      type: string
      format: uuid
      description: Unique identifier for a plant.
    CategoryId:
      type: string
      format: uuid
      description: Unique identifier for a plant category.      
    PlantCategory:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/CategoryId'
        name:
          type: string
      required:
        - id
        - name
      description: Category information for a plant.
    PlantStatus:
      type: string
      enum:
        - available
        - pending
        - sold
      description: Status of a plant.
    Plant:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/PlantId'
        category:
          $ref: '#/components/schemas/PlantCategory'
        name:
          type: string
        photoUrls:
          type: object
          additionalProperties:
            type: string
        status:
          $ref: '#/components/schemas/PlantStatus'
      description: Information about a plant.
    Error:
      type: object
      properties:
        message:
          type: string
      required:
        - message
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  parameters:
    OwnerId:
      name: ownerId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/OwnerId'
      description: Identifier for an owner.
    PlantId:
      name: plantId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/PlantId'
      description: Identifier for a plant.
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
servers:
  - url: https://api.plantstore.com
    description: Production Server
  - url: https://sandbox.plantstore.com
    description: Sandbox Server
